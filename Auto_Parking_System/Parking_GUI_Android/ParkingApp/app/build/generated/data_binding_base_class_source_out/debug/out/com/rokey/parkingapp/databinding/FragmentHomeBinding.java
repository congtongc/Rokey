// Generated by view binder compiler. Do not edit!
package com.rokey.parkingapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.rokey.parkingapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final FloatingActionButton btnPark;

  @NonNull
  public final Button btnRetry;

  @NonNull
  public final LinearLayout errorView;

  @NonNull
  public final ProgressBar pbAvailable;

  @NonNull
  public final ProgressBar pbOccupied;

  @NonNull
  public final ProgressBar pbTotal;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RecyclerView rvParkedVehicles;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  @NonNull
  public final TextView tvAvailableDisabled;

  @NonNull
  public final TextView tvAvailableEv;

  @NonNull
  public final TextView tvAvailableNormal;

  @NonNull
  public final TextView tvAvailablePercent;

  @NonNull
  public final TextView tvAvailableSpots;

  @NonNull
  public final TextView tvError;

  @NonNull
  public final TextView tvOccupiedDisabled;

  @NonNull
  public final TextView tvOccupiedEv;

  @NonNull
  public final TextView tvOccupiedNormal;

  @NonNull
  public final TextView tvOccupiedPercent;

  @NonNull
  public final TextView tvOccupiedSpots;

  @NonNull
  public final TextView tvOcrResult;

  @NonNull
  public final TextView tvTotalDisabled;

  @NonNull
  public final TextView tvTotalEv;

  @NonNull
  public final TextView tvTotalNormal;

  @NonNull
  public final TextView tvTotalPercent;

  @NonNull
  public final TextView tvTotalSpots;

  private FragmentHomeBinding(@NonNull CoordinatorLayout rootView,
      @NonNull FloatingActionButton btnPark, @NonNull Button btnRetry,
      @NonNull LinearLayout errorView, @NonNull ProgressBar pbAvailable,
      @NonNull ProgressBar pbOccupied, @NonNull ProgressBar pbTotal,
      @NonNull ProgressBar progressBar, @NonNull RecyclerView rvParkedVehicles,
      @NonNull SwipeRefreshLayout swipeRefreshLayout, @NonNull TextView tvAvailableDisabled,
      @NonNull TextView tvAvailableEv, @NonNull TextView tvAvailableNormal,
      @NonNull TextView tvAvailablePercent, @NonNull TextView tvAvailableSpots,
      @NonNull TextView tvError, @NonNull TextView tvOccupiedDisabled,
      @NonNull TextView tvOccupiedEv, @NonNull TextView tvOccupiedNormal,
      @NonNull TextView tvOccupiedPercent, @NonNull TextView tvOccupiedSpots,
      @NonNull TextView tvOcrResult, @NonNull TextView tvTotalDisabled, @NonNull TextView tvTotalEv,
      @NonNull TextView tvTotalNormal, @NonNull TextView tvTotalPercent,
      @NonNull TextView tvTotalSpots) {
    this.rootView = rootView;
    this.btnPark = btnPark;
    this.btnRetry = btnRetry;
    this.errorView = errorView;
    this.pbAvailable = pbAvailable;
    this.pbOccupied = pbOccupied;
    this.pbTotal = pbTotal;
    this.progressBar = progressBar;
    this.rvParkedVehicles = rvParkedVehicles;
    this.swipeRefreshLayout = swipeRefreshLayout;
    this.tvAvailableDisabled = tvAvailableDisabled;
    this.tvAvailableEv = tvAvailableEv;
    this.tvAvailableNormal = tvAvailableNormal;
    this.tvAvailablePercent = tvAvailablePercent;
    this.tvAvailableSpots = tvAvailableSpots;
    this.tvError = tvError;
    this.tvOccupiedDisabled = tvOccupiedDisabled;
    this.tvOccupiedEv = tvOccupiedEv;
    this.tvOccupiedNormal = tvOccupiedNormal;
    this.tvOccupiedPercent = tvOccupiedPercent;
    this.tvOccupiedSpots = tvOccupiedSpots;
    this.tvOcrResult = tvOcrResult;
    this.tvTotalDisabled = tvTotalDisabled;
    this.tvTotalEv = tvTotalEv;
    this.tvTotalNormal = tvTotalNormal;
    this.tvTotalPercent = tvTotalPercent;
    this.tvTotalSpots = tvTotalSpots;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnPark;
      FloatingActionButton btnPark = ViewBindings.findChildViewById(rootView, id);
      if (btnPark == null) {
        break missingId;
      }

      id = R.id.btnRetry;
      Button btnRetry = ViewBindings.findChildViewById(rootView, id);
      if (btnRetry == null) {
        break missingId;
      }

      id = R.id.errorView;
      LinearLayout errorView = ViewBindings.findChildViewById(rootView, id);
      if (errorView == null) {
        break missingId;
      }

      id = R.id.pbAvailable;
      ProgressBar pbAvailable = ViewBindings.findChildViewById(rootView, id);
      if (pbAvailable == null) {
        break missingId;
      }

      id = R.id.pbOccupied;
      ProgressBar pbOccupied = ViewBindings.findChildViewById(rootView, id);
      if (pbOccupied == null) {
        break missingId;
      }

      id = R.id.pbTotal;
      ProgressBar pbTotal = ViewBindings.findChildViewById(rootView, id);
      if (pbTotal == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.rvParkedVehicles;
      RecyclerView rvParkedVehicles = ViewBindings.findChildViewById(rootView, id);
      if (rvParkedVehicles == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      id = R.id.tvAvailableDisabled;
      TextView tvAvailableDisabled = ViewBindings.findChildViewById(rootView, id);
      if (tvAvailableDisabled == null) {
        break missingId;
      }

      id = R.id.tvAvailableEv;
      TextView tvAvailableEv = ViewBindings.findChildViewById(rootView, id);
      if (tvAvailableEv == null) {
        break missingId;
      }

      id = R.id.tvAvailableNormal;
      TextView tvAvailableNormal = ViewBindings.findChildViewById(rootView, id);
      if (tvAvailableNormal == null) {
        break missingId;
      }

      id = R.id.tvAvailablePercent;
      TextView tvAvailablePercent = ViewBindings.findChildViewById(rootView, id);
      if (tvAvailablePercent == null) {
        break missingId;
      }

      id = R.id.tvAvailableSpots;
      TextView tvAvailableSpots = ViewBindings.findChildViewById(rootView, id);
      if (tvAvailableSpots == null) {
        break missingId;
      }

      id = R.id.tvError;
      TextView tvError = ViewBindings.findChildViewById(rootView, id);
      if (tvError == null) {
        break missingId;
      }

      id = R.id.tvOccupiedDisabled;
      TextView tvOccupiedDisabled = ViewBindings.findChildViewById(rootView, id);
      if (tvOccupiedDisabled == null) {
        break missingId;
      }

      id = R.id.tvOccupiedEv;
      TextView tvOccupiedEv = ViewBindings.findChildViewById(rootView, id);
      if (tvOccupiedEv == null) {
        break missingId;
      }

      id = R.id.tvOccupiedNormal;
      TextView tvOccupiedNormal = ViewBindings.findChildViewById(rootView, id);
      if (tvOccupiedNormal == null) {
        break missingId;
      }

      id = R.id.tvOccupiedPercent;
      TextView tvOccupiedPercent = ViewBindings.findChildViewById(rootView, id);
      if (tvOccupiedPercent == null) {
        break missingId;
      }

      id = R.id.tvOccupiedSpots;
      TextView tvOccupiedSpots = ViewBindings.findChildViewById(rootView, id);
      if (tvOccupiedSpots == null) {
        break missingId;
      }

      id = R.id.tvOcrResult;
      TextView tvOcrResult = ViewBindings.findChildViewById(rootView, id);
      if (tvOcrResult == null) {
        break missingId;
      }

      id = R.id.tvTotalDisabled;
      TextView tvTotalDisabled = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalDisabled == null) {
        break missingId;
      }

      id = R.id.tvTotalEv;
      TextView tvTotalEv = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalEv == null) {
        break missingId;
      }

      id = R.id.tvTotalNormal;
      TextView tvTotalNormal = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalNormal == null) {
        break missingId;
      }

      id = R.id.tvTotalPercent;
      TextView tvTotalPercent = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalPercent == null) {
        break missingId;
      }

      id = R.id.tvTotalSpots;
      TextView tvTotalSpots = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalSpots == null) {
        break missingId;
      }

      return new FragmentHomeBinding((CoordinatorLayout) rootView, btnPark, btnRetry, errorView,
          pbAvailable, pbOccupied, pbTotal, progressBar, rvParkedVehicles, swipeRefreshLayout,
          tvAvailableDisabled, tvAvailableEv, tvAvailableNormal, tvAvailablePercent,
          tvAvailableSpots, tvError, tvOccupiedDisabled, tvOccupiedEv, tvOccupiedNormal,
          tvOccupiedPercent, tvOccupiedSpots, tvOcrResult, tvTotalDisabled, tvTotalEv,
          tvTotalNormal, tvTotalPercent, tvTotalSpots);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
